   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----   



	+--------------------------------------------------------------+
	|                                                              |
	|    CCCC PPPPP  UU  UU           2222    3333   LL    SSSS    |
	|   CC    PP  PP UU  UU          22  22  33  33  LL   SS       |
	|   CC    PPPPP  UU  UU   ####      22      33   LL    SSSS    |
	|   CC    PP     UU  UU           222    33  33  LL       SS   |
	|    CCCC PP      UUUU           222222   3333   LLLL  SSSS    |
	|                                                              |
	|   CPU23LS Conspiracy Processing Unit Load/Store              |
	|       an esoteric 23-bit processing unit                     |
	|                                                              |
	|                                                              |
	|  This document draft is to be seen as confidential and only  |
	|  intended for the eyes of real truth seekers.                |
	|  If you have received this document in error or if you       |
	|  don't identify yourself as truth seeker; any review,        |
	|  dissemination, or copying is strictly prohibited.           |
	|  For your own safety, immediatly delete this document and    |
	|  all its attachments.                                        |
	|                                                              |
	|                                                              |
	| by                                                           |
	|     Hanno Sternberg <hanno@almostintelligent.de>             |
	|                                              (c) 2012 - 2013 |
	|                                                              |
	+--------------------------------------------------------------+


# === SUMMARY ================================================================ #

This is a Load/Store variation of the original CPU23 specification. Therefore 
it lacks the indirect addressing feature. The amount of internal registers has 
been quadrupled.

- Wordsize:
	* 24 bit words (WORD) with None-Execution bit 
		-> 23 bit usable data
- 64 WORD processor registers
	* 58 Data registers (R00-R57)
	* 1 Extend register (RX)
	* 1 Status register (SR)
	* 1 Interrupt handler (IH)
	* 1 Stack pointer (SP)
	* 1 Display memory pointer (DM)
	* 1 Programm counter (PC)
- Up to 2^23 WORDS of internal Memory (IM)
	* Basic operating system (BM)
	* programm memory (PM)
	* stack memory (SM)
- Up to 2^23 WORDS of external Memory (EM) 
	* Blockwise R/W access
- Integrated text display driver
	* ASCII compatible
	* Fixed size 80x30 character display with buffer memory (DM)
	
The document will use the following short hand forms:
	 x  - Just the value x.
	(x) - The value of register x.
	[x] - The value at the address from register x.


# === STATUS REGISTER ======================================================== #

	 23  22  21  20  19  18  17  16
	+---+---+---+---+---+---+---+---+---+---+--- ... ---+
	| 1 | G | L | E | N | Z | C | V | S | I |           |
	+---+---+---+---+---+---+---+---+---+---+--- ... ---+

- G: Greater
- L: Less
- E: Equal
- N: Negative
- Z: Zero
- C: Carry
- V: Overflow
- S: Strict mode
- I: Interrupt enabled
	

# === INSTRUCTION SET ======================================================== #

There are 3 different types of instructions:

1. Triple operand instructions, where the instruction is composed by 
   two operand selectors (a, b), a result register (d) and an opcode.

	 23  22      18 17        12 11         6 5          0
	+---+----------+------------+------------+------------+
	| 0 |  OPCODE  |      A     |     B      |      D     |
	+---+----------+------------+------------+------------+
	
2. Double operand instructions, where the instruction is composed by 
   one operand selectors (a), an optional constant (c),
   a result register (d) and an opcode.
   

	 23  22      18 17        12 11         6 5          0
	+---+----------+------------+------------+------------+
	| 0 |  OPCODE  |      A     |     C      |      D     |
	+---+----------+------------+------------+------------+
	
	
3. Single operand instructions, where the instruction is composed by 
   one operand selectors (a), an constant (c) and an opcode.

	 23  22      18 17        12 11                     0
	+---+----------+------------+------------------------+
	| 0 |  OPCODE  |      A     |           C            |
	+---+----------+------------+------------------------+
	


	
## --- REGISTER SELECTION --------------------------------------------------- ##

The 16 processor registers can be selected by a 6 bit value.

	Value	| Short	| Description
	-----	| -----	| -----------
	0x00	| R00	| 
	 to	| 	| General purpose registers 0 to 9
	0x39	| R57	| 
	0x3A	| RX	| Extend register
	0x3B	| SR	| Status register
	0x3C	| IH	| Interrupt handler
	0x3D	| SP	| Stack pointer
	0x3E	| DP	| Display pointer
	0x3F	| PC	| Programm counter
	[Register Selection]
	
	
## --- OPCODES -------------------------------------------------------------- ##

Every OpCode has a fixed length of 5 bit. 

	Value	| Name		| Description
	-----	| ----		| -----------
	0x00	| NOP		| No Operation.
	0x01	| LD  a   d  	| Load  `[a]` to `(d)`.
	0x02	| ST  a   d  	| Store `(a)` to `[d]`.
	0x03	| MV  a   d  	| Copy `(a)` to `[d]`.
	0x04	| VAL a   d  	| Set `(a)` to `c`.
	0x04	| SET a     c	| Set bit `c` in `(a)`.
	0x05	| RST a     c	| Reset bit `c` in `(a)`.
	0x06	| ADD a b d  	| Sets `(d)` to `(a) + (b)`. 
	0x07	| SUB a b d  	| Sets `(d)` to `(a) - (b)`. 
	0x08	| LSL a   d c	| Sets `(d) to (a) << c` (logical shift).
	0x09	| LSR a   d c	| Sets `(d) to (a) >> c` (logical shift).
	0x0A	| AND a b    	| Sets `(d)` to `(a) & (b)` (logical AND). 
	0x0B	| OR  a b    	| Sets `(d)` to `(a) | (b)` (logical OR). 
	0x0C	| XOR a b    	| Sets `(d)` to `(a) ^ (b)` (logical XOR). 
	0x0D	| NOT a	  d  	| Sets `(d)` to `!(a)` (logical NOT).
	0x0E	| CMP a b    	| Compares `(a)` and `(b)` and set the flags in SR.
	0x0F	| JMP a      	| Unconditional jump to `(a)`.
	0x10	| BRA a b    	| Mask SR using `(b)` and branch to `(a)`, if not null.
	0x11	| EMW a   d  	| Write word `(a)` to block `[d]` on EM.
	0x12	| EMR a   d  	| Read word from block `[a]` on EM to `(d)`.
	0x13	| 		| 
	0x14	| 		| 
	0x15	| 		| 
	0x16	| 		| 
	0x17	| 		| 
	0x18	| 		| 
	0x19	| 		| 
	0x1A	| 		| 
	0x1B	| 		| 
	0x1C	| 		| 
	0x1D	| 		| 
	0x1E	| 		| 
	0x1F	| 		| 
	[OpCodes]


# === MEMORY ================================================================= #

The memory is organised in four main blocks.

1. Block: DMA Area, Basic operating system, hardware addresses and interrupt handler
2. Block: Mixed (user) programm an data memory
3. Block: Stack
4. Block: Display memory

Diagramm:

	+--------------------+ 0x000000
	|                    |
	|      Basic OS      |
	|                    |
	+--------------------+ 0x0003FF
	|                    |
	|        Memory      |
	|      _ _ _ _ _     |
	.     v v v v v v    .
	.                    .
	.                    .
	+--------------------+ (SP)
	.                    .
	.                    .
	.     ^_^_^_^_^_^    .
	|                    |
	|        Stack       |
	|                    |
	+--------------------+ 0x7FF600
	|                    |
	|   Display Memory   |
	|                    |
	+--------------------+ 0x7FFFFF


Every WORD in the memory has a length of 24 bit, but only the first 23 bits can 
be written by the software. 
The first bit can only written while programming to prevent execution of data 
as a command word.	

## -- DMA ------------------------------------------------------------------- ##

Inside the Basic OS Block, the first few words are reserved for special DMA 
hardware.

The addresses 0x000000 contains the reset address. After power on, the programm 
counter will be set to this address.

The addresses 0x000001 to 0x00000F are reserved for the GPIO DMA. Those 15 
words can be read and written from external pins. This way any external 
hardware can communicate with the CPU. It is possible to overwrite the value of
0x000000 via GPIO.

The addresses 0x000010 to 0x00001F are reserved as input/output buffer for an 
HID, like a keyboard. The last 4 words are used by the UART as input and output 
buffer.
	
# === DISPLAY ================================================================ #

The CPU23 has an integrated text display driver.

An integrated VGA controller supports a fixed resolution of 640x480 pixels with 
a colordepth of 12-Bit per pixel.

Every character has a dimension of 8x16 resulting in a display size of 80x30 
characters.

One WORD of display memory is split in four parts. The leftmost 7-bits define 
the character. The next 14-bits define the back- and foregroundcolor, split up 
in two 8-bit values.

	 23  22           17 14           07 06       00
	+---+---------------+---------------+-----------+
	| 0 |  FOREGROUND   |  BACKGROUND   | CHARACTER |
	+---+---------------+---------------+-----------+


## --- CHARACTER SET -------------------------------------------------------- ##

The character set is ASCII compatible.

	   | …0  …1  …2  …3  …4  …5  …6  …7  …8  …9  …A  …B  …C  …D  …E  …F
	---+---------------------------------------------------------------
	0… |                         not used
	1… |                         not used
	2… | SP  !   "	 #   $   %   &   '   (   )   *   +   ,   -   .   / 
	3… | 0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ? 
	4… | @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O 
	5… | P   Q   R   S   T   U   V   W   X   Y   Z   [   \   ]   ^   _ 
	6… | `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o 
	7… | p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~  DEL



## --- COLORS --------------------------------------------------------------- ##

Colors are displayed using a 8-8-4 palette. Thus there are 8 different values 
for red and green and 4 different values for blue.

The Colors are arranged as follows:

	 7    6 5     3 2     0
	+------+-------+-------+
	| BLUE | GREEN |  RED  |
	+------+-------+-------+

The values get translated into 24-Bit RGB values using the following conversion
tables

	| 2-Bit | 3-Bit | 8-Bit |
	| ----- | ----- | ----- |
	| 0x00  | 0x00  | 0x00  |
	|       | 0x01  | 0x24  |
	|       | 0x02  | 0x48  |
	| 0x01  |       | 0x55  |
	|       | 0x03  | 0x6D  |
	|       | 0x04  | 0x91  |
	| 0x02  |       | 0xAA  |
	|       | 0x05  | 0xB6  |
	|       | 0x06  | 0xDA  |
	| 0x03  | 0x07  | 0xFF  |
	[Color Conversion]



   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----   