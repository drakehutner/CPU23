   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----   



	+--------------------------------------------------------------+
	|                                                              |
	|   CPU23 Conspiracy Processing Unit                           |
	|       an esoteric 23-bit processing unit                     |
	|                                                              |
	| by                                                           |
	|     Hanno Sternberg <hanno@almostintelligent.de>             |
	|                                                   (c) 2012   |
	|                                                              |
	+--------------------------------------------------------------+


# === SUMMARY ==================================================================

- Wordsize:
	* 24 bit words (WORD) with None-Execution bit 
		-> 23 bit usable data
- 15 WORD processor registers
	* 10 Data registers (R0-R9)
	* 1 Extend register (RX)
	* 1 Status register (SR)
	* 1 Interrupt handler (IH)
	* 1 Stack pointer (SP)
	* 1 Programm counter (PC)
- Up to 2^23 WORDS of internal Memory (IM)
	* Basic operating system (BM)
	* programm memory (PM)
	* stack memory (SM)
- Up to 2^23 WORDS of external Memory (EM) 
	* Blockwise R/W access
- Integrated text display driver
	* ASCII compatible
	* Fixed size 80x30 character display with buffer memory (DM)
The document will use the following short hand forms:
	 x  - Just the value x.
	(x) - The value of register x.
	[x] - The value at the address from register x.
	{x} - Can be either (x) or [x].


# === STATUS REGISTER ==========================================================

	 23  22  21  20  19  18  17  16
	+---+---+---+---+---+---+---+---+--- ... ---+
	| 1 | G | L | E | N | Z | C | V |           |
	+---+---+---+---+---+---+---+---+--- ... ---+

- G: Greater
- L: Less
- E: Equal
- N: Negative
- Z: Zero
- C: Carry
- V: Overflow
	

# === INSTRUCTION SET ==========================================================

Each instruction is composed by two operand selectors (a, b) and an opcode.
Additionally there can be a constant value (c).
Each operand selection can have a post de-/increment or an 4 bit index.

	 23  22        18 17  15 14     11 10  08 07     04 03     00
	+---+------------+------+---------+------+---------+---------+
	| 0 |   OPCODE   |  Ia  |    A    |  Ib  |    B    |    C    |
	+---+------------+------+---------+------+---------+---------+
	
Operand A is always the result register.
	
The index Ix can have 8 different values.

	Value	Description
	-----	-----------
	0x00	Direct access: (x)
	0x01	Indirect access: [x]
	0x02	Indirect access with displacement: [x,c]
	0x03	Indirect access with post-Increment [x+]
	0x04	Indirect access with post-Decrement [x-]
	0x05	Indirect access with pre-Increment [+x]
	0x06	Indirect access with pre-Decrement [-x]
	0x07	Treat B and C as one big constant (Ib only).

	
## --- REGISTER SELECTION ------------------------------------------------------

The 16 processor registers can be selected by a 4 bit value.

	Value	Short	Description
	-----	-----	-----------
	0x00	R0	General purpose register 0
	0x01	R1	General purpose register 1
	0x02	R2	General purpose register 2
	0x03	R3	General purpose register 3
	0x04	R4	General purpose register 4
	0x05	R5	General purpose register 5
	0x06	R6	General purpose register 6
	0x07	R7	General purpose register 7
	0x08	R8	General purpose register 8
	0x09	R9	General purpose register 9
	0x0A	RX	Extend register
	0x0B	SR	Status register
	0x0C	IH	Interrupt handler
	0x0D	SP	Stack pointer
	0x0E	DP	Display pointer
	0x0F	PC	Programm counter
	
	
## --- OPCODES -----------------------------------------------------------------

Every OpCode has a fixed length of 5 bit. 

	Value	Name		Description
	-----	----		-----------
	0x00	NOP		No Operation.
	0x01	CPY a b		Load/Store {a} to {b}.
	0x02	SET a b		Set bit b in {a}.
	0x03	RST a b		Reset bit b in {a}.
	0x04	ADD a b		Sets {a} to {a} + {b}. 
	0x05	SUB a b		Sets {a} to {a} - {b}. 
	0x06	LSL a   c	Sets {a} to {a} << b+c (logical shift).
				Implicite Ib = 0x7
	0x07	LSR a   c	Sets {a} to {a} >> b+c (logical shift).
				Implicite Ib = 0x7
	0x08	AND a b		Sets {a} to {a} & {b}.
	0x09	OR  a b		Sets {a} to {a} | {b}.
	0x0A	XOR a b		Sets {a} to {a} ^ {b}.
	0x0B	NOT a		Inverts {a}.
	0x0C	CMP a b		Compares {a} and {b} and set the flags in SR.
	0x0D	JMP a		Unconditional jump to {a}.
	0x0E	BRA a b		Branch to {a}, if Flag b is set in SR.
	0x0F	CLL a		Call subroutine {a}.
	0x10	BRS a b		Branch subroutine {a}, if Flag b is set in SR.
				Pushes the current PC to the stack.
	0x11	RTS		Return from subroutine. 
				Pops the PC from the stack.
	0x12	EMW a b		Write word [b] to block [a] on MD.
	0x13	EMR a b		Read word from block [b] to [a].
	0x14	
	0x15	
	0x16	
	0x17	
	0x18	
	0x19	
	0x1A	
	0x1B	
	0x1C	
	0x1D	
	0x1E	
	0x1F	


# === MEMORY ===================================================================

The memory is organised in four main blocks.

1. Block: Basic operating system, hardware addresses and interrupt handler
2. Block: Mixed (user) programm an data memory
3. Block: Stack
4. Block: Display memory

	+--------------------+ 0x000000
	|                    |
	|      Basic OS      |
	|                    |
	+--------------------+ 0x0003FF
	|                    |
	|        Memory      |
	|      _ _ _ _ _     |
	.     v v v v v v    .
	.                    .
	.                    .
	+--------------------+ (SP)
	.                    .
	.                    .
	.     ^_^_^_^_^_^    .
	|                    |
	|        Stack       |
	|                    |
	+--------------------+ 0x7FF600
	|                    |
	|   Display Memory   |
	|                    |
	+--------------------+ 0x7FFFFF


Every WORD in the memory has a length of 24 bit, but only the first 23 bits can 
be written by the software. 
The first bit can only written while programming to prevent execution of data 
as a command word.	
	
# === DISPLAY ==================================================================

The CPU23 has an integrated text display driver.

An integrated VGA controller supports a fixed resolution of 640x480 pixels with 
a colordepth of 12-Bit per pixel.

Every character has a dimension of 8x16 resulting in a display size of 80x30 
characters.

One WORD of display memory is split in four parts. The leftmost 7-bits define 
the character. The next 14-bits define the back- and foregroundcolor, split up 
in two 7-bit values.

	 23  22  21           17 14           08 07       00
	+---+---+---------------+---------------+-----------+
	| 0 |   |  FOREGROUND   |  BACKGROUND   | CHARACTER |
	+---+---+---------------+---------------+-----------+


# --- CHARACTER SET ------------------------------------------------------------

The character set is ASCII compatible.

	   | …0  …1  …2  …3  …4  …5  …6  …7  …8  …9  …A  …B  …C  …D  …E  …F
	---+---------------------------------------------------------------
	0… |                         not used
	1… |                         not used
	2… | SP  !   "	 #   $   %   &   '   (   )   *   +   ,   -   .   / 
	3… | 0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ? 
	4… | @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O 
	5… | P   Q   R   S   T   U   V   W   X   Y   Z   [   \   ]   ^   _ 
	6… | `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o 
	7… | p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~  DEL



# --- COLORS -------------------------------------------------------------------

The color has a depth of 7-bits for the three colors red, green and blue.
The BRIGHT-bit is used as global third bit for every color part.

	 6      5        4 3     2 1     0
	+--------+--------+-------+-------+
	| BRIGHT |  BLUE  | GREEN |  RED  |
	+--------+--------+-------+-------+

As the VGA-Signal have 10-Bit per channel, the seperate colors get expand by 
stretching the 2-bit to 8-bit values and get shifted afterwards by 2.



	BRIGHT	Value	Stretched
	------	-----	---------
	0	0x0	0x0 = 0
	0	0x1	0x1 = 32
	0	0x2	0x2 = 64
	0	0x3	0x3 = 96
	1	0x0	0x4 = 128
	1	0x1	0x5 = 160
	1	0x2	0x6 = 192
	1	0x3	0x7 = 224


   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----   