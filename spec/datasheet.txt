   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

   
    +--------------------------------------------------------------+
    |                                                              |
    |     CCCCC  PPPPPP   UU   UU               22222     33333    |
    |    CC      PP   PP  UU   UU              22  222   33   33   |
    |    CC      PPPPPP   UU   UU    ######       222       333    |
    |    CC      PP       UU   UU               222      33   33   |
    |     CCCCC  PP        UUUUU               222222     33333    |
    |                                                              |
    |   CPU23 Conspiracy Processing Unit                           |
    |       an esoteric 23-bit processing unit                     |
    |                                                              |
    |                                                              |
    |  This document draft is to be treated as confidential and    |
    |  only intended for the eyes of real seekers of truths        |
    |  If you have received this document in error or if you       |
    |  don't identify yourself as seeker of truths; any review,    |
    |  dissemination, or copying is strictly prohibited.           |
    |  For your own safety, immediately delete this document and   |
    |  all its attachments.                                        |
    |                                                              |
    |                                                              |
    | by                                                           |
    |     Hanno Sternberg [hanno@almostintelligent.de]             |
    |     Thomas Starke   [starke.thomas@yahoo.de]                 |
    |                                              (c) 2012 - 2014 |
    |                                                              |
    +--------------------------------------------------------------+






















 53                                                                            1
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    


# ==[ SUMMARY ]=============================================================== #

- Wordsize:
    * 24 bit words (WORD) with None-Execution bit 
            -> 23 bits of usable data
- 64 WORD processor registers
    * 46 Data registers          (R00-R45)
    * 1 Extend register          (RX)
    * 1 Return register          (RT)
    * 1 Status register          (SR)
    * 1 Timer register           (TR)
    * 1 Prescaler register       (PR)
    * 1 Interrupt mask           (IM)
    * 1 Interrupt vector         (IV)
    * 1 Interrupt selection      (IS)
    * 1 Interrupt handler        (IH)
    * 1 Interrupt return         (IR)
    * 1 Frame pointer            (FP)
    * 1 Stack pointer            (SP)
    * 1 Stack base pointer       (BP)
    * 1 Display base pointer     (DB)
    * 1 Display memory pointer   (DM)
    * 1 Program counter          (PC)
- Up to 2^23 WORDS of internal Memory
    * Basic operating system     (BM)
    * program memory             (PM)
    * stack memory               (SM)
- Up to 2^23 WORDS of external Memory
    * Word wise R/W access
- Integrated text display driver
    * ASCII compatible
    * Fixed size 80x40 character display with buffer memory (DM)
    * 8 bit indexed foreground and background colors
- Integrated debug interface 
    * Single Stepping Mode
    * Complete Register and Memory RW-Access
    * Breakpoints
    * Register watchdogs

The document will use the following short hand forms:
     x  - Just the value x.
    (x) - The value of register x.
    [x] - The value at the address from register x.








108                                                                            2
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

   
# ==[ STATUS REGISTER ]======================================================= #

      22  21  20  19  18  17  16  15  14  13  12  11  10  09  08  07  06  05
    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+...
    | 1 | F | N | O | R | D | X | W | I | T | H | G | E | L | C | U | Z | V | 
    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+...

- G: Greater
- L: Less
- E: Equal
- T: True (all bits one)
- Z: Zero (all bits zero)
- C: Carry 
- V: Overflow
- U: Underflow
- I: Interrupts active 
- D: Dirty
- N: New
- W: World
- O: Order
- F: Fnord
- R: Redundant
- X: eXtensions
- H: Halt

In the later of this document SR(x) refers to the corresponding bit in the SR. 























163                                                                            3
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

   
# ==[ INSTRUCTION SET ]======================================================= #

There are 4 different types of instructions:

1. Triple operand instructions, where the instruction is composed by 
   two operand selectors (a, b), a result register (d) and an opcode.

     23  22      18 17        12 11         6 5          0
    +---+----------+------------+------------+------------+
    | 0 |  OPCODE  |      A     |     B      |      D     |
    +---+----------+------------+------------+------------+

2. Double operand instructions, where the instruction is composed by 
   one operand selectors (a), an optional constant (c),
   a result register (d) and an opcode.
   

     23  22      18 17        12 11         6 5          0
    +---+----------+------------+------------+------------+
    | 0 |  OPCODE  |      A     |     C      |      D     |
    +---+----------+------------+------------+------------+

    
3. Single operand instructions, where the instruction is composed by 
   one operand selectors (a), an constant (c) and an opcode.

     23  22      18 17        12 11                     0
    +---+----------+------------+------------------------+
    | 0 |  OPCODE  |      A     |           C            |
    +---+----------+------------+------------------------+        

3. Single operand instructions, where the instruction is composed by 
   one result register (d), an constant (c) and an opcode.

     23  22      18 17                     6 5          0
    +---+----------+------------------------+------------+
    | 0 |  OPCODE  |            C           |       D    |
    +---+----------+------------------------+------------+












218                                                                            4
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

   
## --{ REGISTER SELECTION }-------------------------------------------------- ##

The 64 processor registers can be selected by a 6 bit value.

    Value   | Short | Description
    -----   | ----- | -----------
    0x00    | R00   | 
     to     |       | General purpose registers 0 to 45
    0x2D    | R45   | 
    0x2E    | RX    | Extend register
    0x2F    |       | 
    0x30    |       | 
    0x31    |       | 
    0x32    |       | 
    0x33    | RT    | Return register
    0x34    | SR    | Status register
    0x35    | IS    | Interrupt Select
    0x36    | IM    | Interrupt mask
    0x37    | IV    | Interrupt vector
    0x38    | IH    | Interrupt handler
    0x39    | IR    | Interrupt return
    0x3A    | FP    | Frame pointer
    0x3B    | SP    | Stack pointer
    0x3C    | BP    | Stack base pointer
    0x3D    | DB    | Display base Pointer
    0x3E    | DM    | Display memory pointer
    0x3F    | PC    | Programm counter
    [Register Selection]






















273                                                                            5
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

   
## --{ OPCODES }------------------------------------------------------------- ##

Every OpCode has a fixed length of 5 bit. 

    Value | Name        | Description
    ----- | ----        | -----------
    0x00  | NOP         | No Operation.
    0x01  | LDR a   d   | Load  `[a]` to `(d)`.
    0x02  | STR a   d   | Store `(a)` to `[d]`.
    0x03  | CPR a   d   | Copy  `(a)` to `(d)`.
    0x04  | SET     d c | Set   `(d)` to `c`.
    0x05  | BIT a   d c | Copy `(a)` to `(d)` but (re-)set bit `c & 0x1F` to `c & 0x20`.
    0x06  | ADD a b d   | Sets `(d)` to `(a) + (b)`. 
          |             |   Clears and sets SR(Z;T;V;C) 
    0x07  | SUB a b d   | Sets `(d)` to `(a) - (b)`. 
          |             |   Clears and sets SR(Z;T;U;C) 
    0x08  | LSL a   d c | Sets `(d)` to `(a) << c`  (logical shift).
          |             |   Clears and sets SR(Z;T;C) 
    0x09  | LSR a   d c | Sets `(d)` to `(a) >> c`  (logical shift).
          |             |   Clears and sets SR(Z;T;C) 
    0x0A  | AND a b d   | Sets `(d)` to `(a) & (b)` (logical AND). 
          |             |   Clears and sets SR(Z;T) 
    0x0B  | OR  a b d   | Sets `(d)` to `(a) | (b)` (logical OR). 
          |             |   Clears and sets SR(Z;T) 
    0x0C  | XOR a b d   | Sets `(d)` to `(a) ^ (b)` (logical XOR). 
          |             |   Clears and sets SR(Z;T) 
    0x0D  | NOT a   d   | Sets `(d)` to `!(a)`      (logical NOT).
          |             |   Clears and sets SR(Z;T) 
    0x0E  | CMP a b     | Compares `(a)` and `(b)` and set the flags in SR.
          |             |   Clears and sets SR(Z;T;G;L;E)
    0x0F  | BRA a       | Branch to (a) if SR(Z) is set.
    0x10  | JMP a       | Unconditional jump to `(a)`.
    0x11  | EMW a   d c | Write `c` words `(a)` to block `[d]` on EM.
          |             |   Takes `c` Cycles
    0x12  | EMR a   d c | Read  `c` words from block `[a]` on EM to `(d)`.
          |             |   Takes `c` Cycles
    0x13  |             | 
     to   |             | Reconfigurable
    0x1E  |             | 
    0x1F  | HLT         | Halt the CPU, stop all operations
    [OpCodes]









328                                                                            6
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

   
# ==[ MEMORY ]================================================================ #

The memory is organised in four main blocks.

1. Block: DMA Area, 
      Basic operating system, 
      hardware addresses and interrupt handling
2. Block: Mixed (user) programm an data memory
3. Block: Stack
4. Block: Display memory

Diagramm:

    +--------------------+ 0x000000
    |                    |
    |      Basic OS      |
    |                    |
    +--------------------+ 0x0003FF
    |                    |
    |        Memory      |
    |      _ _ _ _ _     |
    .     v v v v v v    .
    .                    .
    .                    .
    +--------------------+ (SP)
    .                    .
    .                    . 
    .     ^_^_^_^_^_^    .
    |                    |
    |        Stack       |
    |                    |
    +--------------------+ (BP) 0x7FF600
    |                    |
    |   Display Memory   |
    |                    |
    +--------------------+ 0x7FFFFF

Every WORD in the memory has a length of 24 bit, but only the first 23 bits can 
be written by the software. 
The first bit can only written while programming to prevent execution of data 
as a command word.        









383                                                                            7
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

## --{ DMA & SPECIAL PURPOSE ADDRESSES }------------------------------------- ##

Inside the Basic OS Block (BOB), the first few words are reserved for special 
DMA hardware.

    Address (range)     | RW | Ext | Purpose
    ---------------     | -- | --- | -------
    0x000000            | R  |     | Reset Address
    0x000001            | R  |     | CPU UID
    0x000002            | R  |     | All Zeros
    0x000003            | R  |     | All Ones
    0x000004            | R  |     | Random
    0x000005            | RW |     | Pseudo Random (23 Bit LFSR) [XNOR 23,18]
    0x00000C - 0x000022 | RW |     | Interrupt vectors
    0x000023            | R  |     | DMAADDR (For interrupt selection)
    0x000024 - 0x00003A | RW |  X  | DMA00 - 12
    0x00003B - 0x000041 | R  |     | Basic Interrupt handling routine
    [Table of special purpose addresses]

The DMA-Interface consists of 2x23 (2 Words) bit IO pins (DMAADDR & DMADATA).
DMAADDR defines the address via One-Hot encoding.
DMADATA contains the data to be written or to be read.

External access on a DMA Address will trigger the corresponding Interrupt.



























438                                                                            8
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    


# ==[ INTERRUPT HANDLING ]==================================================== #

The IM, IV, IS, IR and IH registers control the interrupt handling.
Individual interrupts can be activated through setting the bits in IM, whereby
1 means interrupt is enabled.

If SR(I) is set:
    - PC will be copied into IR 
    - IH will be set to the corresponding interrupt vector (0x00000B - 22)

    BIT SR SR #0x0E  % Reset Interrupt-Flag in SR
    SET IS #0x23     % Set constant interrupt selection address
    LDR IS IV        % Load interrupt vector
    AND IV IM IS     % Mask interrupt vector with interrupt mask
    BRA IR           % On inactive Interrupt Return to normal program
    JMP IH           % Jump to interrupt handler
    HLT              % Security measure, should never be reached

## --{ AVAILABLE INTERRUPTS }------------------------------------------------ ##



    Vector Addr | Int. DMA | Ext. DMA | Interrupt | Description
    ----------- | -------- | -------- | --------- | -----------
     0x00000B   | 0x000024 | 0x000001 |           | Reset Interrupt
     0x00000C   | 0x000025 | 0x000002 |  Write    | Timer Interrupt
     0x00000D   | 0x000026 | 0x000004 |           | 
     0x00000E   | 0x000027 | 0x000008 |  Write    | Keyboard Interrupt
     0x00000F   | 0x000028 | 0x000010 |  Write    | Mouse Interrupt
     0x000010   | 0x000029 | 0x000020 |  Read     | UART TX Interrupt
     0x000011   | 0x00002A | 0x000040 |  Write    | UART RX Interrupt
     0x000012   | 0x00002B | 0x000080 |           | 
     0x000013   | 0x00002C | 0x000100 |           | 
     0x000014   | 0x00002D | 0x000200 |           | 
     0x000015   | 0x00002E | 0x000400 |           | 
     0x000016   | 0x00002F | 0x000800 |           | 
     0x000017   | 0x000030 | 0x001000 |           | 
     0x000018   | 0x000031 | 0x002000 |           | 
     0x000019   | 0x000032 | 0x004000 |           | 
     0x00001A   | 0x000033 | 0x008000 |           | 
     0x00001B   | 0x000034 | 0x010000 |           | 
     0x00001C   | 0x000035 | 0x020000 |           | 
     0x00001D   | 0x000036 | 0x040000 |           | 
     0x00001E   | 0x000037 | 0x080000 |           | 
     0x00001F   | 0x000038 | 0x100000 |           | 
     0x000020   | 0x000039 | 0x200000 |           | 
     0x000021   | 0x00003A | 0x400000 |           | 


     
493                                                                            9
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

   
# ==[ DEBUG INTERFACE ]======================================================= #

CPU23LS features a sophisticated debugging interface integrated deeply into the 
core of the CPU. Communication with the outside world is archived over a UART 
connection.

It is possible to read and write all registers and the memory, therefore 
controlling the whole CPU through the interface. If needed, the instructions 
can be single stepped.

The Debug interface controls the CPU through controlling the clock.


## --{ DEBUG COMMUNICATION PROTOCOL }---------------------------------------- ##

The communication protocol is packet based, whereby a packet is one word 
containing a debug instruction in minimum. Additional words with payload data 
may follow in consequential words.


    Value | Size | Operation          | Parameters
    ----- | ---- | ---------          | ----------
    0x00  |      |                    |
    0x01  | 1    | Register read      | None
    0x02  | 2    | Register write     | Value
    0x03  | 2    | Memory read        | Starting Address
    0x04  | 3    | Memory write       | Starting Address, Value, ...
    0x05  | 2    | Breakpoints        | Address
    0x06  | 3    | Register Watchdog  | Register, Value
    0x07  |      |                    | 
    [Debug Instructions]



















548                                                                           10
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

# ==[ TIMER ]================================================================= #

  TODO
















































603                                                                           11
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----   
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    

# ==[ DISPLAY ]=============================================================== #

The CPU23 has an integrated text display driver.
An integrated VGA controller supports a fixed resolution of 640x480 pixels with 
a color depth of 12-Bit per pixel.

Every character has a dimension of 8x16 resulting in a display size of 80x30 
characters.

One WORD of display memory is split in four parts. The leftmost 7-bits define 
the character. Bits 15 to 22 define the back- and foreground color.
The colors are defined by a 16 element palette.

     23  22        19 18        15 14           07 06       00
    +---+------------+------------+---------------+-----------+
    | 0 | FOREGROUND | BACKGROUND |   undefined   | CHARACTER |
    +---+------------+------------+---------------+-----------+

## --{ CHARACTER SET }------------------------------------------------------- ##

The character set is ASCII compatible.

       | _0  _1  _2  _3  _4  _5  _6  _7  _8  _9  _A  _B  _C  _D  _E  _F
    ---+---------------------------------------------------------------
    0_ |                         not used
    1_ |                         not used
    2_ | SP  !   "   #   $   %   &   '   (   )   *   +   ,   -   .   / 
    3_ | 0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ? 
    4_ | @   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O 
    5_ | P   Q   R   S   T   U   V   W   X   Y   Z   [   \   ]   ^   _ 
    6_ | `   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o 
    7_ | p   q   r   s   t   u   v   w   x   y   z   {   |   }   ~  DEL

## --{ COLORS }-------------------------------------------------------------- ##



|       |BLACK  |RED    |GREEN  |YELLOW |BLUE   |MAGENTA|CYAN   |WHITE  |
|:------|:------|:------|:------|:------|:------|:------|:------|:------|
|Dim    |#000000|#C75646|#8EB33B|#D0B03C|#72B3CC|#C8A0D1|#218693|#B0B0B0|
|       |  0x00 |  0x01 |  0x02 |  0x03 |  0x04 |  0x05 |  0x06 |  0x07 |
|       |       |       |       |       |       |       |       |       |
|Bright |#5D5D5D|#E09690|#CDEE69|#FFE377|#9CD9F0|#FBB1F9|#77DFD8|#F7F7F7|
|       |  0x08 |  0x09 |  0x0A |  0x0B |  0x0C |  0x0D |  0x0E |  0x0F |
|       |       |       |       |       |       |       |       |       |






658                                                                           12
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----   
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    


# ==[ VHDL-MODULES ]========================================================== #





  - Internal
    - Pipeline
    - ALU
    - Memory Controller
      - SRAM / DRAM
    - Debug Controller
      - UART
    - Timer
    - Display
      - VGA
    - Flash / External Memory
  - External
    - USB-HID / PS2
      - Keyboard
      - Mouse
    - UART
  - 
  - 
  - 
  - 
























713                                                                           13
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    


                                   NOTES

















































768                                                                           14
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----    


                                   NOTES

















































823                                                                           15
   ----- DO NOT DISTRIBUTE ----- PROJECT CPU23 ----- DO NOT DISTRIBUTE -----   